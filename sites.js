#!/usr/bin/env node

import pkg1 from 'stream-csv-as-json/AsObjects.js';
const { asObjects } = pkg1
import pkg2 from 'stream-csv-as-json/Stringer.js';
const { stringer } = pkg2
import pkg3 from 'stream-json/streamers/StreamValues.js';
const { streamValues } = pkg3
import pkg4 from 'stream-json/Disassembler.js';
const { disassembler } = pkg4
import pkg5 from 'stream-chain';
const { chain } = pkg5
import pkg6 from 'stream-csv-as-json';
const { parser } = pkg6

import { createReadStream, createWriteStream, writeFileSync } from 'fs';
import { execa } from 'execa';

import { Command } from 'commander'
const program = new Command();
program
  .description('Fetch information about pantheon sites and export to CSV')
  .argument('<source>', 'source CSV file, generated by `terminus site:list --format=csv --fields=id,name,plan,framework,is_frozen`')
  .argument('<target>', 'target CSV file')
  .parse(process.argv);

const [source, target] = program.args;

const headers = [
  'ID',
  'Name',
  'Label',
  'Domains',
  'Created',
  'Framework',
  'CMS Version',
  'PHP',
]

writeFileSync('sitesnew.csv', headers.map(header => `"${header}"`).join(',') + '\n');

chain([
  createReadStream(source),
  parser(),
  asObjects(),
  streamValues(),
  ({ key, value: { 'Is Frozen?': Frozen, Name, ID, Plan, Framework } }) => {
    if ('true' === Frozen || 'Sandbox' === Plan) {
      return;
    }

    let result = {
      ID,
      Framework,
      Name,
    }

    const siteLive = `${ID}.live`;
    const label = execa('terminus', ['site:info', ID, '--field=label'])
      .then(({ stdout }) => result.Label = stdout)
      .catch(() => result.Label = '');
    const domains = execa('terminus', ['domain:list', '--format=json', '--fields=id,primary,type', siteLive])
      .then(({ stdout }) => {
        let domains = Object.values(JSON.parse(stdout));
        let primary
        domains = domains.reduce((acc, { id, primary: isPrimary, type }) => {
          if (isPrimary) primary = id;
          else if ('custom' === type) acc.push(id);
          return acc;
        }, []);
        if (primary) domains.unshift(primary);
        result.Domains = domains.join('\n');
      })
      .catch(() => result.Domains = '');
    const envInfo = execa('terminus', ['env:info', '--format=json', '--fields=created,php_version', siteLive])
      .then(({ stdout }) => {
        const { created, php_version } = JSON.parse(stdout);
        result.Created = new Date(created * 1000).toISOString().split('T')[0];
        result.PHP = php_version;
      })
      .catch(() => {
        result.Created = '';
        result.PHP = '';
      });

    const cmsVersion = execa('terminus',
      'drupal' === Framework
        ? ['drush', siteLive, '--', 'status', '--field=drupal-version']
        : ['wp', siteLive, '--', 'core', 'version']
    )
      .then(({ stdout }) => result['CMS Version'] = stdout)
      .catch(() => result['CMS Version'] = '');

    return Promise.all([label, domains, envInfo, cmsVersion]).then(() => {
      return [headers.map(header => (result[header] ?? '').toString())]
    });
  },
  disassembler(),
  stringer(),
  createWriteStream(target, { flags: 'a' }),
]);
